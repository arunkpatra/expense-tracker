<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Instructs Spring to perfrom declarative transaction management on annotated 
		classes -->
	<tx:annotation-driven />

	<!-- Drives transactions using local JPA APIs -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Creates a EntityManagerFactory for use with the Hibernate JPA provider 
		and a simple in-memory data source populated with test data -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
	</bean>

	<!-- Create a database on the fly in demo mode. This is the default behavior -->
	<beans profile="demo">
		<jdbc:embedded-database id="dataSource" type="DERBY">
<!-- 		<jdbc:embedded-database id="_dataSource" type="DERBY"> -->
			<jdbc:script 
				location="classpath:scripts/derby-expense-tracker-create-objects.sql" />
			<jdbc:script location="classpath:scripts/expense-tracker-insert-data.sql" />
		</jdbc:embedded-database>
<!-- 		<bean id="dataSource" class="net.bull.javamelody.SpringDataSourceFactoryBean"> -->
<!-- 			<property name="targetName" value="_dataSource" /> -->
<!-- 		</bean> -->
	</beans>

	<!-- When you supply your own database, you must activate this profile. 
		Simply pass a -Dspring.profiles.active="production" JVM startup property -->
	<beans profile="production">
<!-- 		<bean id="_dataSource" class="com.exp.tracker.utils.TrackingBasicDataSource" -->
<!-- 			destroy-method="close"> -->
			<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> -->
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<!-- <property name="driverClass" value="${jdbc.driverClassName}" /> -->
			<!-- <property name="jdbcUrl" value="${jdbc.url}" /> -->
			<!-- <property name="user" value="${jdbc.username}" /> -->
			<property name="password" value="${jdbc.password}" />
			<property name="maxActive" value="100" />
			<property name="maxWait" value="1000" />
			<property name="initialSize" value="10" />
			<property name="minIdle" value="5" />
			<property name="testOnBorrow" value="true"/>
			<property name="poolPreparedStatements" value="true"/>
<!-- 			<property name="validationQuery" value="SELECT 0"/> -->
		</bean>
<!-- 		<bean id="dataSource" class="net.bull.javamelody.SpringDataSourceFactoryBean"> -->
<!-- 			<property name="targetName" value="_dataSource" /> -->
<!-- 		</bean> -->
		<!-- <bean id="dataSourceMBean" -->
		<!-- class="org.apache.commons.dbcp.management.BasicDataSourceMBean"> -->
		<!-- <constructor-arg ref="dataSource" /> -->
		<!-- </bean> -->
		<!-- <bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter"> 
			<property name="beans"> <map> <entry key="DBCP:name=dataSource" value-ref="dataSource" 
			/> </map> </property> </bean> -->
	</beans>

</beans>